"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtService = void 0;
const decorator_1 = require("@midwayjs/decorator");
const jwt = require("jsonwebtoken");
/**
 *
 * @see{@link https://github.com/auth0/node-jsonwebtoken}
 */
let JwtService = class JwtService {
    signSync(payload, secretOrPrivateKey, options) {
        var _a, _b;
        if (!options) {
            options = secretOrPrivateKey;
            secretOrPrivateKey = (_a = this.jwtConfig) === null || _a === void 0 ? void 0 : _a.secret;
        }
        if (!secretOrPrivateKey) {
            throw new Error('[midway:jwt] jwt secret should be set');
        }
        options = options !== null && options !== void 0 ? options : {};
        options.expiresIn = (_b = options.expiresIn) !== null && _b !== void 0 ? _b : this.jwtConfig.expiresIn;
        return jwt.sign(payload, secretOrPrivateKey, options);
    }
    async sign(payload, secretOrPrivateKey, options) {
        var _a, _b;
        if (!options) {
            options = secretOrPrivateKey;
            secretOrPrivateKey = (_a = this.jwtConfig) === null || _a === void 0 ? void 0 : _a.secret;
        }
        if (!secretOrPrivateKey) {
            throw new Error('[midway:jwt] provide the jwt secret please');
        }
        options = options !== null && options !== void 0 ? options : {};
        options.expiresIn = (_b = options.expiresIn) !== null && _b !== void 0 ? _b : this.jwtConfig.expiresIn;
        return new Promise((resolve, reject) => {
            jwt.sign(payload, secretOrPrivateKey, options, (err, encoded) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(encoded);
                }
            });
        });
    }
    verifySync(token, secretOrPublicKey, options) {
        var _a;
        if (!options) {
            options = secretOrPublicKey;
            secretOrPublicKey = (_a = this.jwtConfig) === null || _a === void 0 ? void 0 : _a.secret;
        }
        if (!secretOrPublicKey) {
            throw new Error('[midway:jwt] provide the jwt secret please');
        }
        return jwt.verify(token, secretOrPublicKey, options);
    }
    async verify(token, secretOrPublicKey, options) {
        var _a;
        if (!options) {
            options = secretOrPublicKey;
            secretOrPublicKey = (_a = this.jwtConfig) === null || _a === void 0 ? void 0 : _a.secret;
        }
        if (!secretOrPublicKey) {
            throw new Error('[midway:jwt] provide the jwt secret please');
        }
        return new Promise((resolve, reject) => {
            jwt.verify(token, secretOrPublicKey, options, (err, encoded) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(encoded);
                }
            });
        });
    }
    decode(token, options) {
        return jwt.decode(token, options);
    }
    decodeSync(token, options) {
        return this.decode(token, options);
    }
};
__decorate([
    (0, decorator_1.Config)('jwt'),
    __metadata("design:type", Object)
], JwtService.prototype, "jwtConfig", void 0);
JwtService = __decorate([
    (0, decorator_1.Provide)(),
    (0, decorator_1.Scope)(decorator_1.ScopeEnum.Singleton)
], JwtService);
exports.JwtService = JwtService;
//# sourceMappingURL=jwt.js.map